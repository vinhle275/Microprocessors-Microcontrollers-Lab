
Lab1_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001634  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001740  08001740  00011740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001764  08001764  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001764  08001764  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001764  08001764  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001764  08001764  00011764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001768  08001768  00011768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800176c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001778  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001778  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031bf  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ea1  00000000  00000000  000231f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000438  00000000  00000000  00024098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b0  00000000  00000000  000244d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155d8  00000000  00000000  00024880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005003  00000000  00000000  00039e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079a68  00000000  00000000  0003ee5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b88c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f08  00000000  00000000  000b8918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001728 	.word	0x08001728

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001728 	.word	0x08001728

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fbe5 	bl	8000920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f80c 	bl	8000172 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f845 	bl	80001e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  uint16_t count[1] = {100};
 800015e:	2364      	movs	r3, #100	; 0x64
 8000160:	80bb      	strh	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  test(&count[0]);
 8000162:	1d3b      	adds	r3, r7, #4
 8000164:	4618      	mov	r0, r3
 8000166:	f000 f94b 	bl	8000400 <test>
	  HAL_Delay(10);
 800016a:	200a      	movs	r0, #10
 800016c:	f000 fc3a 	bl	80009e4 <HAL_Delay>
	  test(&count[0]);
 8000170:	e7f7      	b.n	8000162 <main+0x16>

08000172 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000172:	b580      	push	{r7, lr}
 8000174:	b090      	sub	sp, #64	; 0x40
 8000176:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000178:	f107 0318 	add.w	r3, r7, #24
 800017c:	2228      	movs	r2, #40	; 0x28
 800017e:	2100      	movs	r1, #0
 8000180:	4618      	mov	r0, r3
 8000182:	f001 fac9 	bl	8001718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000186:	1d3b      	adds	r3, r7, #4
 8000188:	2200      	movs	r2, #0
 800018a:	601a      	str	r2, [r3, #0]
 800018c:	605a      	str	r2, [r3, #4]
 800018e:	609a      	str	r2, [r3, #8]
 8000190:	60da      	str	r2, [r3, #12]
 8000192:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000194:	2302      	movs	r3, #2
 8000196:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000198:	2301      	movs	r3, #1
 800019a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800019c:	2310      	movs	r3, #16
 800019e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001a0:	2300      	movs	r3, #0
 80001a2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001a4:	f107 0318 	add.w	r3, r7, #24
 80001a8:	4618      	mov	r0, r3
 80001aa:	f000 feb5 	bl	8000f18 <HAL_RCC_OscConfig>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001b4:	f000 fb28 	bl	8000808 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001b8:	230f      	movs	r3, #15
 80001ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001bc:	2300      	movs	r3, #0
 80001be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c0:	2300      	movs	r3, #0
 80001c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001c4:	2300      	movs	r3, #0
 80001c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001c8:	2300      	movs	r3, #0
 80001ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001cc:	1d3b      	adds	r3, r7, #4
 80001ce:	2100      	movs	r1, #0
 80001d0:	4618      	mov	r0, r3
 80001d2:	f001 f921 	bl	8001418 <HAL_RCC_ClockConfig>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001dc:	f000 fb14 	bl	8000808 <Error_Handler>
  }
}
 80001e0:	bf00      	nop
 80001e2:	3740      	adds	r7, #64	; 0x40
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ee:	f107 0308 	add.w	r3, r7, #8
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <MX_GPIO_Init+0x60>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	4a11      	ldr	r2, [pc, #68]	; (8000248 <MX_GPIO_Init+0x60>)
 8000202:	f043 0304 	orr.w	r3, r3, #4
 8000206:	6193      	str	r3, [r2, #24]
 8000208:	4b0f      	ldr	r3, [pc, #60]	; (8000248 <MX_GPIO_Init+0x60>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	f003 0304 	and.w	r3, r3, #4
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 8000214:	2200      	movs	r2, #0
 8000216:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800021a:	480c      	ldr	r0, [pc, #48]	; (800024c <MX_GPIO_Init+0x64>)
 800021c:	f000 fe64 	bl	8000ee8 <HAL_GPIO_WritePin>
                          |LED_8_Pin|LED_9_Pin|LED_10_Pin|LED_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_0_Pin LED_1_Pin LED_2_Pin LED_3_Pin
                           LED_4_Pin LED_5_Pin LED_6_Pin LED_7_Pin
                           LED_8_Pin LED_9_Pin LED_10_Pin LED_11_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 8000220:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000224:	60bb      	str	r3, [r7, #8]
                          |LED_4_Pin|LED_5_Pin|LED_6_Pin|LED_7_Pin
                          |LED_8_Pin|LED_9_Pin|LED_10_Pin|LED_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000226:	2301      	movs	r3, #1
 8000228:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800022a:	2300      	movs	r3, #0
 800022c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800022e:	2302      	movs	r3, #2
 8000230:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000232:	f107 0308 	add.w	r3, r7, #8
 8000236:	4619      	mov	r1, r3
 8000238:	4804      	ldr	r0, [pc, #16]	; (800024c <MX_GPIO_Init+0x64>)
 800023a:	f000 fcdb 	bl	8000bf4 <HAL_GPIO_Init>

}
 800023e:	bf00      	nop
 8000240:	3718      	adds	r7, #24
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40021000 	.word	0x40021000
 800024c:	40010800 	.word	0x40010800

08000250 <led_0>:

/* USER CODE BEGIN 4 */
void led_0(uint8_t n){
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, n);
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	461a      	mov	r2, r3
 800025e:	2110      	movs	r1, #16
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <led_0+0x20>)
 8000262:	f000 fe41 	bl	8000ee8 <HAL_GPIO_WritePin>
}
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40010800 	.word	0x40010800

08000274 <led_1>:
void led_1(uint8_t n){
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, n);
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	461a      	mov	r2, r3
 8000282:	2120      	movs	r1, #32
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <led_1+0x20>)
 8000286:	f000 fe2f 	bl	8000ee8 <HAL_GPIO_WritePin>
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40010800 	.word	0x40010800

08000298 <led_2>:
void led_2(uint8_t n){
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, n);
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	461a      	mov	r2, r3
 80002a6:	2140      	movs	r1, #64	; 0x40
 80002a8:	4803      	ldr	r0, [pc, #12]	; (80002b8 <led_2+0x20>)
 80002aa:	f000 fe1d 	bl	8000ee8 <HAL_GPIO_WritePin>
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40010800 	.word	0x40010800

080002bc <led_3>:
void led_3(uint8_t n){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, n);
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	461a      	mov	r2, r3
 80002ca:	2180      	movs	r1, #128	; 0x80
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <led_3+0x20>)
 80002ce:	f000 fe0b 	bl	8000ee8 <HAL_GPIO_WritePin>
}
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40010800 	.word	0x40010800

080002e0 <led_4>:
void led_4(uint8_t n){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, n);
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	461a      	mov	r2, r3
 80002ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f2:	4803      	ldr	r0, [pc, #12]	; (8000300 <led_4+0x20>)
 80002f4:	f000 fdf8 	bl	8000ee8 <HAL_GPIO_WritePin>
}
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40010800 	.word	0x40010800

08000304 <led_5>:
void led_5(uint8_t n){
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, n);
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	461a      	mov	r2, r3
 8000312:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000316:	4803      	ldr	r0, [pc, #12]	; (8000324 <led_5+0x20>)
 8000318:	f000 fde6 	bl	8000ee8 <HAL_GPIO_WritePin>
}
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	40010800 	.word	0x40010800

08000328 <led_6>:
void led_6(uint8_t n){
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, n);
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	461a      	mov	r2, r3
 8000336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800033a:	4803      	ldr	r0, [pc, #12]	; (8000348 <led_6+0x20>)
 800033c:	f000 fdd4 	bl	8000ee8 <HAL_GPIO_WritePin>
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40010800 	.word	0x40010800

0800034c <led_7>:
void led_7(uint8_t n){
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_7_GPIO_Port, LED_7_Pin, n);
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	461a      	mov	r2, r3
 800035a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800035e:	4803      	ldr	r0, [pc, #12]	; (800036c <led_7+0x20>)
 8000360:	f000 fdc2 	bl	8000ee8 <HAL_GPIO_WritePin>
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40010800 	.word	0x40010800

08000370 <led_8>:
void led_8(uint8_t n){
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_8_GPIO_Port, LED_8_Pin, n);
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	461a      	mov	r2, r3
 800037e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000382:	4803      	ldr	r0, [pc, #12]	; (8000390 <led_8+0x20>)
 8000384:	f000 fdb0 	bl	8000ee8 <HAL_GPIO_WritePin>
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40010800 	.word	0x40010800

08000394 <led_9>:
void led_9(uint8_t n){
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_9_GPIO_Port, LED_9_Pin, n);
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	461a      	mov	r2, r3
 80003a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a6:	4803      	ldr	r0, [pc, #12]	; (80003b4 <led_9+0x20>)
 80003a8:	f000 fd9e 	bl	8000ee8 <HAL_GPIO_WritePin>
}
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40010800 	.word	0x40010800

080003b8 <led_10>:
void led_10(uint8_t n){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_10_GPIO_Port, LED_10_Pin, n);
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	461a      	mov	r2, r3
 80003c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ca:	4803      	ldr	r0, [pc, #12]	; (80003d8 <led_10+0x20>)
 80003cc:	f000 fd8c 	bl	8000ee8 <HAL_GPIO_WritePin>
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40010800 	.word	0x40010800

080003dc <led_11>:
void led_11(uint8_t n){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_11_GPIO_Port, LED_11_Pin, n);
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	461a      	mov	r2, r3
 80003ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ee:	4803      	ldr	r0, [pc, #12]	; (80003fc <led_11+0x20>)
 80003f0:	f000 fd7a 	bl	8000ee8 <HAL_GPIO_WritePin>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40010800 	.word	0x40010800

08000400 <test>:
void test(uint16_t* pcount){
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	static uint8_t num = 0;
	if(num == 12) num = 0;
 8000408:	4be1      	ldr	r3, [pc, #900]	; (8000790 <test+0x390>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b0c      	cmp	r3, #12
 800040e:	d102      	bne.n	8000416 <test+0x16>
 8000410:	4bdf      	ldr	r3, [pc, #892]	; (8000790 <test+0x390>)
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]

	if(*pcount == 0){
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	881b      	ldrh	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	f040 81e8 	bne.w	80007f0 <test+0x3f0>
		switch(num){
 8000420:	4bdb      	ldr	r3, [pc, #876]	; (8000790 <test+0x390>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b0b      	cmp	r3, #11
 8000426:	f200 81da 	bhi.w	80007de <test+0x3de>
 800042a:	a201      	add	r2, pc, #4	; (adr r2, 8000430 <test+0x30>)
 800042c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000430:	08000461 	.word	0x08000461
 8000434:	080004ab 	.word	0x080004ab
 8000438:	080004f5 	.word	0x080004f5
 800043c:	0800053f 	.word	0x0800053f
 8000440:	08000589 	.word	0x08000589
 8000444:	080005d3 	.word	0x080005d3
 8000448:	0800061d 	.word	0x0800061d
 800044c:	08000667 	.word	0x08000667
 8000450:	080006b1 	.word	0x080006b1
 8000454:	080006fb 	.word	0x080006fb
 8000458:	08000745 	.word	0x08000745
 800045c:	08000795 	.word	0x08000795
		case 0:
			led_0(ON);
 8000460:	2000      	movs	r0, #0
 8000462:	f7ff fef5 	bl	8000250 <led_0>
			led_1(OFF);
 8000466:	2001      	movs	r0, #1
 8000468:	f7ff ff04 	bl	8000274 <led_1>
			led_2(OFF);
 800046c:	2001      	movs	r0, #1
 800046e:	f7ff ff13 	bl	8000298 <led_2>
			led_3(OFF);
 8000472:	2001      	movs	r0, #1
 8000474:	f7ff ff22 	bl	80002bc <led_3>
			led_4(OFF);
 8000478:	2001      	movs	r0, #1
 800047a:	f7ff ff31 	bl	80002e0 <led_4>
			led_5(OFF);
 800047e:	2001      	movs	r0, #1
 8000480:	f7ff ff40 	bl	8000304 <led_5>
			led_6(OFF);
 8000484:	2001      	movs	r0, #1
 8000486:	f7ff ff4f 	bl	8000328 <led_6>
			led_7(OFF);
 800048a:	2001      	movs	r0, #1
 800048c:	f7ff ff5e 	bl	800034c <led_7>
			led_8(OFF);
 8000490:	2001      	movs	r0, #1
 8000492:	f7ff ff6d 	bl	8000370 <led_8>
			led_9(OFF);
 8000496:	2001      	movs	r0, #1
 8000498:	f7ff ff7c 	bl	8000394 <led_9>
			led_10(OFF);
 800049c:	2001      	movs	r0, #1
 800049e:	f7ff ff8b 	bl	80003b8 <led_10>
			led_11(OFF);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f7ff ff9a 	bl	80003dc <led_11>
			break;
 80004a8:	e199      	b.n	80007de <test+0x3de>
		case 1:
			led_0(OFF);
 80004aa:	2001      	movs	r0, #1
 80004ac:	f7ff fed0 	bl	8000250 <led_0>
			led_1(ON);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fedf 	bl	8000274 <led_1>
			led_2(OFF);
 80004b6:	2001      	movs	r0, #1
 80004b8:	f7ff feee 	bl	8000298 <led_2>
			led_3(OFF);
 80004bc:	2001      	movs	r0, #1
 80004be:	f7ff fefd 	bl	80002bc <led_3>
			led_4(OFF);
 80004c2:	2001      	movs	r0, #1
 80004c4:	f7ff ff0c 	bl	80002e0 <led_4>
			led_5(OFF);
 80004c8:	2001      	movs	r0, #1
 80004ca:	f7ff ff1b 	bl	8000304 <led_5>
			led_6(OFF);
 80004ce:	2001      	movs	r0, #1
 80004d0:	f7ff ff2a 	bl	8000328 <led_6>
			led_7(OFF);
 80004d4:	2001      	movs	r0, #1
 80004d6:	f7ff ff39 	bl	800034c <led_7>
			led_8(OFF);
 80004da:	2001      	movs	r0, #1
 80004dc:	f7ff ff48 	bl	8000370 <led_8>
			led_9(OFF);
 80004e0:	2001      	movs	r0, #1
 80004e2:	f7ff ff57 	bl	8000394 <led_9>
			led_10(OFF);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f7ff ff66 	bl	80003b8 <led_10>
			led_11(OFF);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f7ff ff75 	bl	80003dc <led_11>
			break;
 80004f2:	e174      	b.n	80007de <test+0x3de>
		case 2:
			led_0(OFF);
 80004f4:	2001      	movs	r0, #1
 80004f6:	f7ff feab 	bl	8000250 <led_0>
			led_1(OFF);
 80004fa:	2001      	movs	r0, #1
 80004fc:	f7ff feba 	bl	8000274 <led_1>
			led_2(ON);
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff fec9 	bl	8000298 <led_2>
			led_3(OFF);
 8000506:	2001      	movs	r0, #1
 8000508:	f7ff fed8 	bl	80002bc <led_3>
			led_4(OFF);
 800050c:	2001      	movs	r0, #1
 800050e:	f7ff fee7 	bl	80002e0 <led_4>
			led_5(OFF);
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff fef6 	bl	8000304 <led_5>
			led_6(OFF);
 8000518:	2001      	movs	r0, #1
 800051a:	f7ff ff05 	bl	8000328 <led_6>
			led_7(OFF);
 800051e:	2001      	movs	r0, #1
 8000520:	f7ff ff14 	bl	800034c <led_7>
			led_8(OFF);
 8000524:	2001      	movs	r0, #1
 8000526:	f7ff ff23 	bl	8000370 <led_8>
			led_9(OFF);
 800052a:	2001      	movs	r0, #1
 800052c:	f7ff ff32 	bl	8000394 <led_9>
			led_10(OFF);
 8000530:	2001      	movs	r0, #1
 8000532:	f7ff ff41 	bl	80003b8 <led_10>
			led_11(OFF);
 8000536:	2001      	movs	r0, #1
 8000538:	f7ff ff50 	bl	80003dc <led_11>
			break;
 800053c:	e14f      	b.n	80007de <test+0x3de>
		case 3:
			led_0(OFF);
 800053e:	2001      	movs	r0, #1
 8000540:	f7ff fe86 	bl	8000250 <led_0>
			led_1(OFF);
 8000544:	2001      	movs	r0, #1
 8000546:	f7ff fe95 	bl	8000274 <led_1>
			led_2(OFF);
 800054a:	2001      	movs	r0, #1
 800054c:	f7ff fea4 	bl	8000298 <led_2>
			led_3(ON);
 8000550:	2000      	movs	r0, #0
 8000552:	f7ff feb3 	bl	80002bc <led_3>
			led_4(OFF);
 8000556:	2001      	movs	r0, #1
 8000558:	f7ff fec2 	bl	80002e0 <led_4>
			led_5(OFF);
 800055c:	2001      	movs	r0, #1
 800055e:	f7ff fed1 	bl	8000304 <led_5>
			led_6(OFF);
 8000562:	2001      	movs	r0, #1
 8000564:	f7ff fee0 	bl	8000328 <led_6>
			led_7(OFF);
 8000568:	2001      	movs	r0, #1
 800056a:	f7ff feef 	bl	800034c <led_7>
			led_8(OFF);
 800056e:	2001      	movs	r0, #1
 8000570:	f7ff fefe 	bl	8000370 <led_8>
			led_9(OFF);
 8000574:	2001      	movs	r0, #1
 8000576:	f7ff ff0d 	bl	8000394 <led_9>
			led_10(OFF);
 800057a:	2001      	movs	r0, #1
 800057c:	f7ff ff1c 	bl	80003b8 <led_10>
			led_11(OFF);
 8000580:	2001      	movs	r0, #1
 8000582:	f7ff ff2b 	bl	80003dc <led_11>
			break;
 8000586:	e12a      	b.n	80007de <test+0x3de>
		case 4:
			led_0(OFF);
 8000588:	2001      	movs	r0, #1
 800058a:	f7ff fe61 	bl	8000250 <led_0>
			led_1(OFF);
 800058e:	2001      	movs	r0, #1
 8000590:	f7ff fe70 	bl	8000274 <led_1>
			led_2(OFF);
 8000594:	2001      	movs	r0, #1
 8000596:	f7ff fe7f 	bl	8000298 <led_2>
			led_3(OFF);
 800059a:	2001      	movs	r0, #1
 800059c:	f7ff fe8e 	bl	80002bc <led_3>
			led_4(ON);
 80005a0:	2000      	movs	r0, #0
 80005a2:	f7ff fe9d 	bl	80002e0 <led_4>
			led_5(OFF);
 80005a6:	2001      	movs	r0, #1
 80005a8:	f7ff feac 	bl	8000304 <led_5>
			led_6(OFF);
 80005ac:	2001      	movs	r0, #1
 80005ae:	f7ff febb 	bl	8000328 <led_6>
			led_7(OFF);
 80005b2:	2001      	movs	r0, #1
 80005b4:	f7ff feca 	bl	800034c <led_7>
			led_8(OFF);
 80005b8:	2001      	movs	r0, #1
 80005ba:	f7ff fed9 	bl	8000370 <led_8>
			led_9(OFF);
 80005be:	2001      	movs	r0, #1
 80005c0:	f7ff fee8 	bl	8000394 <led_9>
			led_10(OFF);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f7ff fef7 	bl	80003b8 <led_10>
			led_11(OFF);
 80005ca:	2001      	movs	r0, #1
 80005cc:	f7ff ff06 	bl	80003dc <led_11>
			break;
 80005d0:	e105      	b.n	80007de <test+0x3de>
		case 5:
			led_0(OFF);
 80005d2:	2001      	movs	r0, #1
 80005d4:	f7ff fe3c 	bl	8000250 <led_0>
			led_1(OFF);
 80005d8:	2001      	movs	r0, #1
 80005da:	f7ff fe4b 	bl	8000274 <led_1>
			led_2(OFF);
 80005de:	2001      	movs	r0, #1
 80005e0:	f7ff fe5a 	bl	8000298 <led_2>
			led_3(OFF);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f7ff fe69 	bl	80002bc <led_3>
			led_4(OFF);
 80005ea:	2001      	movs	r0, #1
 80005ec:	f7ff fe78 	bl	80002e0 <led_4>
			led_5(ON);
 80005f0:	2000      	movs	r0, #0
 80005f2:	f7ff fe87 	bl	8000304 <led_5>
			led_6(OFF);
 80005f6:	2001      	movs	r0, #1
 80005f8:	f7ff fe96 	bl	8000328 <led_6>
			led_7(OFF);
 80005fc:	2001      	movs	r0, #1
 80005fe:	f7ff fea5 	bl	800034c <led_7>
			led_8(OFF);
 8000602:	2001      	movs	r0, #1
 8000604:	f7ff feb4 	bl	8000370 <led_8>
			led_9(OFF);
 8000608:	2001      	movs	r0, #1
 800060a:	f7ff fec3 	bl	8000394 <led_9>
			led_10(OFF);
 800060e:	2001      	movs	r0, #1
 8000610:	f7ff fed2 	bl	80003b8 <led_10>
			led_11(OFF);
 8000614:	2001      	movs	r0, #1
 8000616:	f7ff fee1 	bl	80003dc <led_11>
			break;
 800061a:	e0e0      	b.n	80007de <test+0x3de>
		case 6:
			led_0(OFF);
 800061c:	2001      	movs	r0, #1
 800061e:	f7ff fe17 	bl	8000250 <led_0>
			led_1(OFF);
 8000622:	2001      	movs	r0, #1
 8000624:	f7ff fe26 	bl	8000274 <led_1>
			led_2(OFF);
 8000628:	2001      	movs	r0, #1
 800062a:	f7ff fe35 	bl	8000298 <led_2>
			led_3(OFF);
 800062e:	2001      	movs	r0, #1
 8000630:	f7ff fe44 	bl	80002bc <led_3>
			led_4(OFF);
 8000634:	2001      	movs	r0, #1
 8000636:	f7ff fe53 	bl	80002e0 <led_4>
			led_5(OFF);
 800063a:	2001      	movs	r0, #1
 800063c:	f7ff fe62 	bl	8000304 <led_5>
			led_6(ON);
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff fe71 	bl	8000328 <led_6>
			led_7(OFF);
 8000646:	2001      	movs	r0, #1
 8000648:	f7ff fe80 	bl	800034c <led_7>
			led_8(OFF);
 800064c:	2001      	movs	r0, #1
 800064e:	f7ff fe8f 	bl	8000370 <led_8>
			led_9(OFF);
 8000652:	2001      	movs	r0, #1
 8000654:	f7ff fe9e 	bl	8000394 <led_9>
			led_10(OFF);
 8000658:	2001      	movs	r0, #1
 800065a:	f7ff fead 	bl	80003b8 <led_10>
			led_11(OFF);
 800065e:	2001      	movs	r0, #1
 8000660:	f7ff febc 	bl	80003dc <led_11>
			break;
 8000664:	e0bb      	b.n	80007de <test+0x3de>
		case 7:
			led_0(OFF);
 8000666:	2001      	movs	r0, #1
 8000668:	f7ff fdf2 	bl	8000250 <led_0>
			led_1(OFF);
 800066c:	2001      	movs	r0, #1
 800066e:	f7ff fe01 	bl	8000274 <led_1>
			led_2(OFF);
 8000672:	2001      	movs	r0, #1
 8000674:	f7ff fe10 	bl	8000298 <led_2>
			led_3(OFF);
 8000678:	2001      	movs	r0, #1
 800067a:	f7ff fe1f 	bl	80002bc <led_3>
			led_4(OFF);
 800067e:	2001      	movs	r0, #1
 8000680:	f7ff fe2e 	bl	80002e0 <led_4>
			led_5(OFF);
 8000684:	2001      	movs	r0, #1
 8000686:	f7ff fe3d 	bl	8000304 <led_5>
			led_6(OFF);
 800068a:	2001      	movs	r0, #1
 800068c:	f7ff fe4c 	bl	8000328 <led_6>
			led_7(ON);
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff fe5b 	bl	800034c <led_7>
			led_8(OFF);
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff fe6a 	bl	8000370 <led_8>
			led_9(OFF);
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff fe79 	bl	8000394 <led_9>
			led_10(OFF);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f7ff fe88 	bl	80003b8 <led_10>
			led_11(OFF);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff fe97 	bl	80003dc <led_11>
			break;
 80006ae:	e096      	b.n	80007de <test+0x3de>
		case 8:
			led_0(OFF);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f7ff fdcd 	bl	8000250 <led_0>
			led_1(OFF);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f7ff fddc 	bl	8000274 <led_1>
			led_2(OFF);
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff fdeb 	bl	8000298 <led_2>
			led_3(OFF);
 80006c2:	2001      	movs	r0, #1
 80006c4:	f7ff fdfa 	bl	80002bc <led_3>
			led_4(OFF);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f7ff fe09 	bl	80002e0 <led_4>
			led_5(OFF);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f7ff fe18 	bl	8000304 <led_5>
			led_6(OFF);
 80006d4:	2001      	movs	r0, #1
 80006d6:	f7ff fe27 	bl	8000328 <led_6>
			led_7(OFF);
 80006da:	2001      	movs	r0, #1
 80006dc:	f7ff fe36 	bl	800034c <led_7>
			led_8(ON);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f7ff fe45 	bl	8000370 <led_8>
			led_9(OFF);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f7ff fe54 	bl	8000394 <led_9>
			led_10(OFF);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff fe63 	bl	80003b8 <led_10>
			led_11(OFF);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff fe72 	bl	80003dc <led_11>
			break;
 80006f8:	e071      	b.n	80007de <test+0x3de>
		case 9:
			led_0(OFF);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff fda8 	bl	8000250 <led_0>
			led_1(OFF);
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff fdb7 	bl	8000274 <led_1>
			led_2(OFF);
 8000706:	2001      	movs	r0, #1
 8000708:	f7ff fdc6 	bl	8000298 <led_2>
			led_3(OFF);
 800070c:	2001      	movs	r0, #1
 800070e:	f7ff fdd5 	bl	80002bc <led_3>
			led_4(OFF);
 8000712:	2001      	movs	r0, #1
 8000714:	f7ff fde4 	bl	80002e0 <led_4>
			led_5(OFF);
 8000718:	2001      	movs	r0, #1
 800071a:	f7ff fdf3 	bl	8000304 <led_5>
			led_6(OFF);
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff fe02 	bl	8000328 <led_6>
			led_7(OFF);
 8000724:	2001      	movs	r0, #1
 8000726:	f7ff fe11 	bl	800034c <led_7>
			led_8(OFF);
 800072a:	2001      	movs	r0, #1
 800072c:	f7ff fe20 	bl	8000370 <led_8>
			led_9(ON);
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff fe2f 	bl	8000394 <led_9>
			led_10(OFF);
 8000736:	2001      	movs	r0, #1
 8000738:	f7ff fe3e 	bl	80003b8 <led_10>
			led_11(OFF);
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff fe4d 	bl	80003dc <led_11>
			break;
 8000742:	e04c      	b.n	80007de <test+0x3de>
		case 10:
			led_0(OFF);
 8000744:	2001      	movs	r0, #1
 8000746:	f7ff fd83 	bl	8000250 <led_0>
			led_1(OFF);
 800074a:	2001      	movs	r0, #1
 800074c:	f7ff fd92 	bl	8000274 <led_1>
			led_2(OFF);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff fda1 	bl	8000298 <led_2>
			led_3(OFF);
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff fdb0 	bl	80002bc <led_3>
			led_4(OFF);
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff fdbf 	bl	80002e0 <led_4>
			led_5(OFF);
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff fdce 	bl	8000304 <led_5>
			led_6(OFF);
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff fddd 	bl	8000328 <led_6>
			led_7(OFF);
 800076e:	2001      	movs	r0, #1
 8000770:	f7ff fdec 	bl	800034c <led_7>
			led_8(OFF);
 8000774:	2001      	movs	r0, #1
 8000776:	f7ff fdfb 	bl	8000370 <led_8>
			led_9(OFF);
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff fe0a 	bl	8000394 <led_9>
			led_10(ON);
 8000780:	2000      	movs	r0, #0
 8000782:	f7ff fe19 	bl	80003b8 <led_10>
			led_11(OFF);
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff fe28 	bl	80003dc <led_11>
			break;
 800078c:	e027      	b.n	80007de <test+0x3de>
 800078e:	bf00      	nop
 8000790:	20000028 	.word	0x20000028
		case 11:
			led_0(OFF);
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff fd5b 	bl	8000250 <led_0>
			led_1(OFF);
 800079a:	2001      	movs	r0, #1
 800079c:	f7ff fd6a 	bl	8000274 <led_1>
			led_2(OFF);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f7ff fd79 	bl	8000298 <led_2>
			led_3(OFF);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff fd88 	bl	80002bc <led_3>
			led_4(OFF);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff fd97 	bl	80002e0 <led_4>
			led_5(OFF);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff fda6 	bl	8000304 <led_5>
			led_6(OFF);
 80007b8:	2001      	movs	r0, #1
 80007ba:	f7ff fdb5 	bl	8000328 <led_6>
			led_7(OFF);
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff fdc4 	bl	800034c <led_7>
			led_8(OFF);
 80007c4:	2001      	movs	r0, #1
 80007c6:	f7ff fdd3 	bl	8000370 <led_8>
			led_9(OFF);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f7ff fde2 	bl	8000394 <led_9>
			led_10(OFF);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff fdf1 	bl	80003b8 <led_10>
			led_11(ON);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff fe00 	bl	80003dc <led_11>
			break;
 80007dc:	bf00      	nop
		}
		*pcount = 100;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2264      	movs	r2, #100	; 0x64
 80007e2:	801a      	strh	r2, [r3, #0]
		++num;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <test+0x404>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <test+0x404>)
 80007ee:	701a      	strb	r2, [r3, #0]
	}
	--*pcount;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	801a      	strh	r2, [r3, #0]

}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000028 	.word	0x20000028

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>
	...

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_MspInit+0x5c>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	4a14      	ldr	r2, [pc, #80]	; (8000870 <HAL_MspInit+0x5c>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6193      	str	r3, [r2, #24]
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_MspInit+0x5c>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_MspInit+0x5c>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <HAL_MspInit+0x5c>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	61d3      	str	r3, [r2, #28]
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_MspInit+0x5c>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <HAL_MspInit+0x60>)
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <HAL_MspInit+0x60>)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	40021000 	.word	0x40021000
 8000874:	40010000 	.word	0x40010000

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800087c:	e7fe      	b.n	800087c <NMI_Handler+0x4>

0800087e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <MemManage_Handler+0x4>

0800088a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <UsageFault_Handler+0x4>

08000896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr

080008ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008be:	f000 f875 	bl	80009ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
	...

080008d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008d4:	f7ff fff7 	bl	80008c6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d8:	480b      	ldr	r0, [pc, #44]	; (8000908 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008da:	490c      	ldr	r1, [pc, #48]	; (800090c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008dc:	4a0c      	ldr	r2, [pc, #48]	; (8000910 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a09      	ldr	r2, [pc, #36]	; (8000914 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008f0:	4c09      	ldr	r4, [pc, #36]	; (8000918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008fe:	f000 fee7 	bl	80016d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000902:	f7ff fc23 	bl	800014c <main>
  bx lr
 8000906:	4770      	bx	lr
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800090c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000910:	0800176c 	.word	0x0800176c
  ldr r2, =_sbss
 8000914:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000918:	20000030 	.word	0x20000030

0800091c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC1_2_IRQHandler>
	...

08000920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_Init+0x28>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a07      	ldr	r2, [pc, #28]	; (8000948 <HAL_Init+0x28>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000930:	2003      	movs	r0, #3
 8000932:	f000 f92b 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000936:	200f      	movs	r0, #15
 8000938:	f000 f808 	bl	800094c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800093c:	f7ff ff6a 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40022000 	.word	0x40022000

0800094c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_InitTick+0x54>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_InitTick+0x58>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000962:	fbb3 f3f1 	udiv	r3, r3, r1
 8000966:	fbb2 f3f3 	udiv	r3, r2, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f935 	bl	8000bda <HAL_SYSTICK_Config>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e00e      	b.n	8000998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d80a      	bhi.n	8000996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f000 f90b 	bl	8000ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <HAL_InitTick+0x5c>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20000004 	.word	0x20000004

080009ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_IncTick+0x1c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_IncTick+0x20>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	4a03      	ldr	r2, [pc, #12]	; (80009cc <HAL_IncTick+0x20>)
 80009be:	6013      	str	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	20000008 	.word	0x20000008
 80009cc:	2000002c 	.word	0x2000002c

080009d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <HAL_GetTick+0x10>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	2000002c 	.word	0x2000002c

080009e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009ec:	f7ff fff0 	bl	80009d0 <HAL_GetTick>
 80009f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009fc:	d005      	beq.n	8000a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_Delay+0x44>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4413      	add	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a0a:	bf00      	nop
 8000a0c:	f7ff ffe0 	bl	80009d0 <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d8f7      	bhi.n	8000a0c <HAL_Delay+0x28>
  {
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008

08000a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5e:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	60d3      	str	r3, [r2, #12]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <__NVIC_GetPriorityGrouping+0x18>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	f003 0307 	and.w	r3, r3, #7
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b58:	d301      	bcc.n	8000b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00f      	b.n	8000b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <SysTick_Config+0x40>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b66:	210f      	movs	r1, #15
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f7ff ff90 	bl	8000a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <SysTick_Config+0x40>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <SysTick_Config+0x40>)
 8000b78:	2207      	movs	r2, #7
 8000b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	e000e010 	.word	0xe000e010

08000b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff49 	bl	8000a2c <__NVIC_SetPriorityGrouping>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb4:	f7ff ff5e 	bl	8000a74 <__NVIC_GetPriorityGrouping>
 8000bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	6978      	ldr	r0, [r7, #20]
 8000bc0:	f7ff ff90 	bl	8000ae4 <NVIC_EncodePriority>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff5f 	bl	8000a90 <__NVIC_SetPriority>
}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffb0 	bl	8000b48 <SysTick_Config>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b08b      	sub	sp, #44	; 0x2c
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c06:	e148      	b.n	8000e9a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	f040 8137 	bne.w	8000e94 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	4aa3      	ldr	r2, [pc, #652]	; (8000eb8 <HAL_GPIO_Init+0x2c4>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d05e      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c30:	4aa1      	ldr	r2, [pc, #644]	; (8000eb8 <HAL_GPIO_Init+0x2c4>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d875      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c36:	4aa1      	ldr	r2, [pc, #644]	; (8000ebc <HAL_GPIO_Init+0x2c8>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d058      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c3c:	4a9f      	ldr	r2, [pc, #636]	; (8000ebc <HAL_GPIO_Init+0x2c8>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d86f      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c42:	4a9f      	ldr	r2, [pc, #636]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d052      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c48:	4a9d      	ldr	r2, [pc, #628]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d869      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c4e:	4a9d      	ldr	r2, [pc, #628]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d04c      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c54:	4a9b      	ldr	r2, [pc, #620]	; (8000ec4 <HAL_GPIO_Init+0x2d0>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d863      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c5a:	4a9b      	ldr	r2, [pc, #620]	; (8000ec8 <HAL_GPIO_Init+0x2d4>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d046      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
 8000c60:	4a99      	ldr	r2, [pc, #612]	; (8000ec8 <HAL_GPIO_Init+0x2d4>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d85d      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c66:	2b12      	cmp	r3, #18
 8000c68:	d82a      	bhi.n	8000cc0 <HAL_GPIO_Init+0xcc>
 8000c6a:	2b12      	cmp	r3, #18
 8000c6c:	d859      	bhi.n	8000d22 <HAL_GPIO_Init+0x12e>
 8000c6e:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <HAL_GPIO_Init+0x80>)
 8000c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c74:	08000cef 	.word	0x08000cef
 8000c78:	08000cc9 	.word	0x08000cc9
 8000c7c:	08000cdb 	.word	0x08000cdb
 8000c80:	08000d1d 	.word	0x08000d1d
 8000c84:	08000d23 	.word	0x08000d23
 8000c88:	08000d23 	.word	0x08000d23
 8000c8c:	08000d23 	.word	0x08000d23
 8000c90:	08000d23 	.word	0x08000d23
 8000c94:	08000d23 	.word	0x08000d23
 8000c98:	08000d23 	.word	0x08000d23
 8000c9c:	08000d23 	.word	0x08000d23
 8000ca0:	08000d23 	.word	0x08000d23
 8000ca4:	08000d23 	.word	0x08000d23
 8000ca8:	08000d23 	.word	0x08000d23
 8000cac:	08000d23 	.word	0x08000d23
 8000cb0:	08000d23 	.word	0x08000d23
 8000cb4:	08000d23 	.word	0x08000d23
 8000cb8:	08000cd1 	.word	0x08000cd1
 8000cbc:	08000ce5 	.word	0x08000ce5
 8000cc0:	4a82      	ldr	r2, [pc, #520]	; (8000ecc <HAL_GPIO_Init+0x2d8>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d013      	beq.n	8000cee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cc6:	e02c      	b.n	8000d22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	623b      	str	r3, [r7, #32]
          break;
 8000cce:	e029      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	623b      	str	r3, [r7, #32]
          break;
 8000cd8:	e024      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	3308      	adds	r3, #8
 8000ce0:	623b      	str	r3, [r7, #32]
          break;
 8000ce2:	e01f      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	330c      	adds	r3, #12
 8000cea:	623b      	str	r3, [r7, #32]
          break;
 8000cec:	e01a      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d102      	bne.n	8000cfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	623b      	str	r3, [r7, #32]
          break;
 8000cfa:	e013      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d105      	bne.n	8000d10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d04:	2308      	movs	r3, #8
 8000d06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	611a      	str	r2, [r3, #16]
          break;
 8000d0e:	e009      	b.n	8000d24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d10:	2308      	movs	r3, #8
 8000d12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	615a      	str	r2, [r3, #20]
          break;
 8000d1a:	e003      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
          break;
 8000d20:	e000      	b.n	8000d24 <HAL_GPIO_Init+0x130>
          break;
 8000d22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	2bff      	cmp	r3, #255	; 0xff
 8000d28:	d801      	bhi.n	8000d2e <HAL_GPIO_Init+0x13a>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	e001      	b.n	8000d32 <HAL_GPIO_Init+0x13e>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3304      	adds	r3, #4
 8000d32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2bff      	cmp	r3, #255	; 0xff
 8000d38:	d802      	bhi.n	8000d40 <HAL_GPIO_Init+0x14c>
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	e002      	b.n	8000d46 <HAL_GPIO_Init+0x152>
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	3b08      	subs	r3, #8
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	210f      	movs	r1, #15
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	401a      	ands	r2, r3
 8000d58:	6a39      	ldr	r1, [r7, #32]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	431a      	orrs	r2, r3
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 8090 	beq.w	8000e94 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d74:	4b56      	ldr	r3, [pc, #344]	; (8000ed0 <HAL_GPIO_Init+0x2dc>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a55      	ldr	r2, [pc, #340]	; (8000ed0 <HAL_GPIO_Init+0x2dc>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b53      	ldr	r3, [pc, #332]	; (8000ed0 <HAL_GPIO_Init+0x2dc>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d8c:	4a51      	ldr	r2, [pc, #324]	; (8000ed4 <HAL_GPIO_Init+0x2e0>)
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4013      	ands	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a49      	ldr	r2, [pc, #292]	; (8000ed8 <HAL_GPIO_Init+0x2e4>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d00d      	beq.n	8000dd4 <HAL_GPIO_Init+0x1e0>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a48      	ldr	r2, [pc, #288]	; (8000edc <HAL_GPIO_Init+0x2e8>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d007      	beq.n	8000dd0 <HAL_GPIO_Init+0x1dc>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a47      	ldr	r2, [pc, #284]	; (8000ee0 <HAL_GPIO_Init+0x2ec>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d101      	bne.n	8000dcc <HAL_GPIO_Init+0x1d8>
 8000dc8:	2302      	movs	r3, #2
 8000dca:	e004      	b.n	8000dd6 <HAL_GPIO_Init+0x1e2>
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e002      	b.n	8000dd6 <HAL_GPIO_Init+0x1e2>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e000      	b.n	8000dd6 <HAL_GPIO_Init+0x1e2>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd8:	f002 0203 	and.w	r2, r2, #3
 8000ddc:	0092      	lsls	r2, r2, #2
 8000dde:	4093      	lsls	r3, r2
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000de6:	493b      	ldr	r1, [pc, #236]	; (8000ed4 <HAL_GPIO_Init+0x2e0>)
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	3302      	adds	r3, #2
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d006      	beq.n	8000e0e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e00:	4b38      	ldr	r3, [pc, #224]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	4937      	ldr	r1, [pc, #220]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	608b      	str	r3, [r1, #8]
 8000e0c:	e006      	b.n	8000e1c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e0e:	4b35      	ldr	r3, [pc, #212]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e10:	689a      	ldr	r2, [r3, #8]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4933      	ldr	r1, [pc, #204]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d006      	beq.n	8000e36 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e28:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	492d      	ldr	r1, [pc, #180]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	60cb      	str	r3, [r1, #12]
 8000e34:	e006      	b.n	8000e44 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e36:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e38:	68da      	ldr	r2, [r3, #12]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	4929      	ldr	r1, [pc, #164]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e40:	4013      	ands	r3, r2
 8000e42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d006      	beq.n	8000e5e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e50:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	4923      	ldr	r1, [pc, #140]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	604b      	str	r3, [r1, #4]
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	491f      	ldr	r1, [pc, #124]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e68:	4013      	ands	r3, r2
 8000e6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d006      	beq.n	8000e86 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4919      	ldr	r1, [pc, #100]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	600b      	str	r3, [r1, #0]
 8000e84:	e006      	b.n	8000e94 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	4915      	ldr	r1, [pc, #84]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000e90:	4013      	ands	r3, r2
 8000e92:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	3301      	adds	r3, #1
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f47f aeaf 	bne.w	8000c08 <HAL_GPIO_Init+0x14>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	bf00      	nop
 8000eae:	372c      	adds	r7, #44	; 0x2c
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	10320000 	.word	0x10320000
 8000ebc:	10310000 	.word	0x10310000
 8000ec0:	10220000 	.word	0x10220000
 8000ec4:	10210000 	.word	0x10210000
 8000ec8:	10120000 	.word	0x10120000
 8000ecc:	10110000 	.word	0x10110000
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010000 	.word	0x40010000
 8000ed8:	40010800 	.word	0x40010800
 8000edc:	40010c00 	.word	0x40010c00
 8000ee0:	40011000 	.word	0x40011000
 8000ee4:	40010400 	.word	0x40010400

08000ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ef8:	787b      	ldrb	r3, [r7, #1]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f04:	e003      	b.n	8000f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	041a      	lsls	r2, r3, #16
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	611a      	str	r2, [r3, #16]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e26c      	b.n	8001404 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 8087 	beq.w	8001046 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f38:	4b92      	ldr	r3, [pc, #584]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 030c 	and.w	r3, r3, #12
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d00c      	beq.n	8000f5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f44:	4b8f      	ldr	r3, [pc, #572]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 030c 	and.w	r3, r3, #12
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	d112      	bne.n	8000f76 <HAL_RCC_OscConfig+0x5e>
 8000f50:	4b8c      	ldr	r3, [pc, #560]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5c:	d10b      	bne.n	8000f76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5e:	4b89      	ldr	r3, [pc, #548]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d06c      	beq.n	8001044 <HAL_RCC_OscConfig+0x12c>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d168      	bne.n	8001044 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e246      	b.n	8001404 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f7e:	d106      	bne.n	8000f8e <HAL_RCC_OscConfig+0x76>
 8000f80:	4b80      	ldr	r3, [pc, #512]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a7f      	ldr	r2, [pc, #508]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	e02e      	b.n	8000fec <HAL_RCC_OscConfig+0xd4>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x98>
 8000f96:	4b7b      	ldr	r3, [pc, #492]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a7a      	ldr	r2, [pc, #488]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b78      	ldr	r3, [pc, #480]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a77      	ldr	r2, [pc, #476]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e01d      	b.n	8000fec <HAL_RCC_OscConfig+0xd4>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0xbc>
 8000fba:	4b72      	ldr	r3, [pc, #456]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a71      	ldr	r2, [pc, #452]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b6f      	ldr	r3, [pc, #444]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a6e      	ldr	r2, [pc, #440]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e00b      	b.n	8000fec <HAL_RCC_OscConfig+0xd4>
 8000fd4:	4b6b      	ldr	r3, [pc, #428]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a6a      	ldr	r2, [pc, #424]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b68      	ldr	r3, [pc, #416]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a67      	ldr	r2, [pc, #412]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d013      	beq.n	800101c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fcec 	bl	80009d0 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ffc:	f7ff fce8 	bl	80009d0 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b64      	cmp	r3, #100	; 0x64
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e1fa      	b.n	8001404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100e:	4b5d      	ldr	r3, [pc, #372]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f0      	beq.n	8000ffc <HAL_RCC_OscConfig+0xe4>
 800101a:	e014      	b.n	8001046 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fcd8 	bl	80009d0 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fcd4 	bl	80009d0 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e1e6      	b.n	8001404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001036:	4b53      	ldr	r3, [pc, #332]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x10c>
 8001042:	e000      	b.n	8001046 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d063      	beq.n	800111a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001052:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00b      	beq.n	8001076 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800105e:	4b49      	ldr	r3, [pc, #292]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 030c 	and.w	r3, r3, #12
 8001066:	2b08      	cmp	r3, #8
 8001068:	d11c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x18c>
 800106a:	4b46      	ldr	r3, [pc, #280]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d116      	bne.n	80010a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001076:	4b43      	ldr	r3, [pc, #268]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <HAL_RCC_OscConfig+0x176>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d001      	beq.n	800108e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e1ba      	b.n	8001404 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108e:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	4939      	ldr	r1, [pc, #228]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a2:	e03a      	b.n	800111a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d020      	beq.n	80010ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ac:	4b36      	ldr	r3, [pc, #216]	; (8001188 <HAL_RCC_OscConfig+0x270>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b2:	f7ff fc8d 	bl	80009d0 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ba:	f7ff fc89 	bl	80009d0 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e19b      	b.n	8001404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010cc:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f0      	beq.n	80010ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d8:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	4927      	ldr	r1, [pc, #156]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	600b      	str	r3, [r1, #0]
 80010ec:	e015      	b.n	800111a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <HAL_RCC_OscConfig+0x270>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f4:	f7ff fc6c 	bl	80009d0 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010fc:	f7ff fc68 	bl	80009d0 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e17a      	b.n	8001404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	2b00      	cmp	r3, #0
 8001124:	d03a      	beq.n	800119c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d019      	beq.n	8001162 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_RCC_OscConfig+0x274>)
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001134:	f7ff fc4c 	bl	80009d0 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800113c:	f7ff fc48 	bl	80009d0 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e15a      	b.n	8001404 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_RCC_OscConfig+0x26c>)
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f000 fa9a 	bl	8001694 <RCC_Delay>
 8001160:	e01c      	b.n	800119c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_RCC_OscConfig+0x274>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001168:	f7ff fc32 	bl	80009d0 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116e:	e00f      	b.n	8001190 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001170:	f7ff fc2e 	bl	80009d0 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d908      	bls.n	8001190 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e140      	b.n	8001404 <HAL_RCC_OscConfig+0x4ec>
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000
 8001188:	42420000 	.word	0x42420000
 800118c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001190:	4b9e      	ldr	r3, [pc, #632]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1e9      	bne.n	8001170 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 80a6 	beq.w	80012f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ae:	4b97      	ldr	r3, [pc, #604]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10d      	bne.n	80011d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	4b94      	ldr	r3, [pc, #592]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a93      	ldr	r2, [pc, #588]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b91      	ldr	r3, [pc, #580]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011d2:	2301      	movs	r3, #1
 80011d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d6:	4b8e      	ldr	r3, [pc, #568]	; (8001410 <HAL_RCC_OscConfig+0x4f8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d118      	bne.n	8001214 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011e2:	4b8b      	ldr	r3, [pc, #556]	; (8001410 <HAL_RCC_OscConfig+0x4f8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a8a      	ldr	r2, [pc, #552]	; (8001410 <HAL_RCC_OscConfig+0x4f8>)
 80011e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fbef 	bl	80009d0 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f6:	f7ff fbeb 	bl	80009d0 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b64      	cmp	r3, #100	; 0x64
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e0fd      	b.n	8001404 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001208:	4b81      	ldr	r3, [pc, #516]	; (8001410 <HAL_RCC_OscConfig+0x4f8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d106      	bne.n	800122a <HAL_RCC_OscConfig+0x312>
 800121c:	4b7b      	ldr	r3, [pc, #492]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	4a7a      	ldr	r2, [pc, #488]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6213      	str	r3, [r2, #32]
 8001228:	e02d      	b.n	8001286 <HAL_RCC_OscConfig+0x36e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10c      	bne.n	800124c <HAL_RCC_OscConfig+0x334>
 8001232:	4b76      	ldr	r3, [pc, #472]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	4a75      	ldr	r2, [pc, #468]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 8001238:	f023 0301 	bic.w	r3, r3, #1
 800123c:	6213      	str	r3, [r2, #32]
 800123e:	4b73      	ldr	r3, [pc, #460]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	4a72      	ldr	r2, [pc, #456]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 8001244:	f023 0304 	bic.w	r3, r3, #4
 8001248:	6213      	str	r3, [r2, #32]
 800124a:	e01c      	b.n	8001286 <HAL_RCC_OscConfig+0x36e>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b05      	cmp	r3, #5
 8001252:	d10c      	bne.n	800126e <HAL_RCC_OscConfig+0x356>
 8001254:	4b6d      	ldr	r3, [pc, #436]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	4a6c      	ldr	r2, [pc, #432]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6213      	str	r3, [r2, #32]
 8001260:	4b6a      	ldr	r3, [pc, #424]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	4a69      	ldr	r2, [pc, #420]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6213      	str	r3, [r2, #32]
 800126c:	e00b      	b.n	8001286 <HAL_RCC_OscConfig+0x36e>
 800126e:	4b67      	ldr	r3, [pc, #412]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	4a66      	ldr	r2, [pc, #408]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	6213      	str	r3, [r2, #32]
 800127a:	4b64      	ldr	r3, [pc, #400]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	4a63      	ldr	r2, [pc, #396]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 8001280:	f023 0304 	bic.w	r3, r3, #4
 8001284:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d015      	beq.n	80012ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128e:	f7ff fb9f 	bl	80009d0 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001294:	e00a      	b.n	80012ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001296:	f7ff fb9b 	bl	80009d0 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e0ab      	b.n	8001404 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ac:	4b57      	ldr	r3, [pc, #348]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0ee      	beq.n	8001296 <HAL_RCC_OscConfig+0x37e>
 80012b8:	e014      	b.n	80012e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ba:	f7ff fb89 	bl	80009d0 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c0:	e00a      	b.n	80012d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c2:	f7ff fb85 	bl	80009d0 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e095      	b.n	8001404 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d8:	4b4c      	ldr	r3, [pc, #304]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1ee      	bne.n	80012c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d105      	bne.n	80012f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ea:	4b48      	ldr	r3, [pc, #288]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	4a47      	ldr	r2, [pc, #284]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 8081 	beq.w	8001402 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001300:	4b42      	ldr	r3, [pc, #264]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b08      	cmp	r3, #8
 800130a:	d061      	beq.n	80013d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d146      	bne.n	80013a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001314:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <HAL_RCC_OscConfig+0x4fc>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fb59 	bl	80009d0 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001322:	f7ff fb55 	bl	80009d0 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e067      	b.n	8001404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001334:	4b35      	ldr	r3, [pc, #212]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f0      	bne.n	8001322 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001348:	d108      	bne.n	800135c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800134a:	4b30      	ldr	r3, [pc, #192]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	492d      	ldr	r1, [pc, #180]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800135c:	4b2b      	ldr	r3, [pc, #172]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a19      	ldr	r1, [r3, #32]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	430b      	orrs	r3, r1
 800136e:	4927      	ldr	r1, [pc, #156]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <HAL_RCC_OscConfig+0x4fc>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137a:	f7ff fb29 	bl	80009d0 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001382:	f7ff fb25 	bl	80009d0 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e037      	b.n	8001404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001394:	4b1d      	ldr	r3, [pc, #116]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x46a>
 80013a0:	e02f      	b.n	8001402 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <HAL_RCC_OscConfig+0x4fc>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fb12 	bl	80009d0 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b0:	f7ff fb0e 	bl	80009d0 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e020      	b.n	8001404 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x498>
 80013ce:	e018      	b.n	8001402 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e013      	b.n	8001404 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_RCC_OscConfig+0x4f4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d106      	bne.n	80013fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d001      	beq.n	8001402 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40021000 	.word	0x40021000
 8001410:	40007000 	.word	0x40007000
 8001414:	42420060 	.word	0x42420060

08001418 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0d0      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800142c:	4b6a      	ldr	r3, [pc, #424]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d910      	bls.n	800145c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143a:	4b67      	ldr	r3, [pc, #412]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 0207 	bic.w	r2, r3, #7
 8001442:	4965      	ldr	r1, [pc, #404]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800144a:	4b63      	ldr	r3, [pc, #396]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d001      	beq.n	800145c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0b8      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d020      	beq.n	80014aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001474:	4b59      	ldr	r3, [pc, #356]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	4a58      	ldr	r2, [pc, #352]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800147e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800148c:	4b53      	ldr	r3, [pc, #332]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4a52      	ldr	r2, [pc, #328]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001496:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001498:	4b50      	ldr	r3, [pc, #320]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	494d      	ldr	r1, [pc, #308]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d040      	beq.n	8001538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d107      	bne.n	80014ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014be:	4b47      	ldr	r3, [pc, #284]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d115      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e07f      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d107      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d6:	4b41      	ldr	r3, [pc, #260]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d109      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e073      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e6:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e06b      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014f6:	4b39      	ldr	r3, [pc, #228]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f023 0203 	bic.w	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4936      	ldr	r1, [pc, #216]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001508:	f7ff fa62 	bl	80009d0 <HAL_GetTick>
 800150c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150e:	e00a      	b.n	8001526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001510:	f7ff fa5e 	bl	80009d0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f241 3288 	movw	r2, #5000	; 0x1388
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e053      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001526:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 020c 	and.w	r2, r3, #12
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	429a      	cmp	r2, r3
 8001536:	d1eb      	bne.n	8001510 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001538:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d210      	bcs.n	8001568 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001546:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 0207 	bic.w	r2, r3, #7
 800154e:	4922      	ldr	r1, [pc, #136]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e032      	b.n	80015ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d008      	beq.n	8001586 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4916      	ldr	r1, [pc, #88]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d009      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	490e      	ldr	r1, [pc, #56]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015a6:	f000 f821 	bl	80015ec <HAL_RCC_GetSysClockFreq>
 80015aa:	4602      	mov	r2, r0
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	490a      	ldr	r1, [pc, #40]	; (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 80015b8:	5ccb      	ldrb	r3, [r1, r3]
 80015ba:	fa22 f303 	lsr.w	r3, r2, r3
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <HAL_RCC_ClockConfig+0x1cc>)
 80015c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_RCC_ClockConfig+0x1d0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff f9c0 	bl	800094c <HAL_InitTick>

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40022000 	.word	0x40022000
 80015dc:	40021000 	.word	0x40021000
 80015e0:	08001740 	.word	0x08001740
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000004 	.word	0x20000004

080015ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_RCC_GetSysClockFreq+0x94>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b04      	cmp	r3, #4
 8001614:	d002      	beq.n	800161c <HAL_RCC_GetSysClockFreq+0x30>
 8001616:	2b08      	cmp	r3, #8
 8001618:	d003      	beq.n	8001622 <HAL_RCC_GetSysClockFreq+0x36>
 800161a:	e027      	b.n	800166c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_RCC_GetSysClockFreq+0x98>)
 800161e:	613b      	str	r3, [r7, #16]
      break;
 8001620:	e027      	b.n	8001672 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	0c9b      	lsrs	r3, r3, #18
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <HAL_RCC_GetSysClockFreq+0x9c>)
 800162c:	5cd3      	ldrb	r3, [r2, r3]
 800162e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d010      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_RCC_GetSysClockFreq+0x94>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	0c5b      	lsrs	r3, r3, #17
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	4a11      	ldr	r2, [pc, #68]	; (800168c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001646:	5cd3      	ldrb	r3, [r2, r3]
 8001648:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <HAL_RCC_GetSysClockFreq+0x98>)
 800164e:	fb02 f203 	mul.w	r2, r2, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	fbb2 f3f3 	udiv	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e004      	b.n	8001666 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001660:	fb02 f303 	mul.w	r3, r2, r3
 8001664:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	613b      	str	r3, [r7, #16]
      break;
 800166a:	e002      	b.n	8001672 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_RCC_GetSysClockFreq+0x98>)
 800166e:	613b      	str	r3, [r7, #16]
      break;
 8001670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001672:	693b      	ldr	r3, [r7, #16]
}
 8001674:	4618      	mov	r0, r3
 8001676:	371c      	adds	r7, #28
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	007a1200 	.word	0x007a1200
 8001688:	08001750 	.word	0x08001750
 800168c:	08001760 	.word	0x08001760
 8001690:	003d0900 	.word	0x003d0900

08001694 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <RCC_Delay+0x34>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <RCC_Delay+0x38>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	0a5b      	lsrs	r3, r3, #9
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	fb02 f303 	mul.w	r3, r2, r3
 80016ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016b0:	bf00      	nop
  }
  while (Delay --);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1e5a      	subs	r2, r3, #1
 80016b6:	60fa      	str	r2, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f9      	bne.n	80016b0 <RCC_Delay+0x1c>
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	20000000 	.word	0x20000000
 80016cc:	10624dd3 	.word	0x10624dd3

080016d0 <__libc_init_array>:
 80016d0:	b570      	push	{r4, r5, r6, lr}
 80016d2:	2600      	movs	r6, #0
 80016d4:	4d0c      	ldr	r5, [pc, #48]	; (8001708 <__libc_init_array+0x38>)
 80016d6:	4c0d      	ldr	r4, [pc, #52]	; (800170c <__libc_init_array+0x3c>)
 80016d8:	1b64      	subs	r4, r4, r5
 80016da:	10a4      	asrs	r4, r4, #2
 80016dc:	42a6      	cmp	r6, r4
 80016de:	d109      	bne.n	80016f4 <__libc_init_array+0x24>
 80016e0:	f000 f822 	bl	8001728 <_init>
 80016e4:	2600      	movs	r6, #0
 80016e6:	4d0a      	ldr	r5, [pc, #40]	; (8001710 <__libc_init_array+0x40>)
 80016e8:	4c0a      	ldr	r4, [pc, #40]	; (8001714 <__libc_init_array+0x44>)
 80016ea:	1b64      	subs	r4, r4, r5
 80016ec:	10a4      	asrs	r4, r4, #2
 80016ee:	42a6      	cmp	r6, r4
 80016f0:	d105      	bne.n	80016fe <__libc_init_array+0x2e>
 80016f2:	bd70      	pop	{r4, r5, r6, pc}
 80016f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80016f8:	4798      	blx	r3
 80016fa:	3601      	adds	r6, #1
 80016fc:	e7ee      	b.n	80016dc <__libc_init_array+0xc>
 80016fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001702:	4798      	blx	r3
 8001704:	3601      	adds	r6, #1
 8001706:	e7f2      	b.n	80016ee <__libc_init_array+0x1e>
 8001708:	08001764 	.word	0x08001764
 800170c:	08001764 	.word	0x08001764
 8001710:	08001764 	.word	0x08001764
 8001714:	08001768 	.word	0x08001768

08001718 <memset>:
 8001718:	4603      	mov	r3, r0
 800171a:	4402      	add	r2, r0
 800171c:	4293      	cmp	r3, r2
 800171e:	d100      	bne.n	8001722 <memset+0xa>
 8001720:	4770      	bx	lr
 8001722:	f803 1b01 	strb.w	r1, [r3], #1
 8001726:	e7f9      	b.n	800171c <memset+0x4>

08001728 <_init>:
 8001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172a:	bf00      	nop
 800172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800172e:	bc08      	pop	{r3}
 8001730:	469e      	mov	lr, r3
 8001732:	4770      	bx	lr

08001734 <_fini>:
 8001734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001736:	bf00      	nop
 8001738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800173a:	bc08      	pop	{r3}
 800173c:	469e      	mov	lr, r3
 800173e:	4770      	bx	lr
